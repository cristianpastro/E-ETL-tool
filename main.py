#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed May 27 16:33:13 2020@author: cristian"""from rules.Psi import Psifrom rules.basicsRules.mainRule import *from datetime import datetimefrom rules.rule import Rulefrom saveDatas.csvSave import csvSaveif __name__ == '__main__':    # -- -- -- -- -- -- -- -- E-E -- -- -- -- -- -- -- -- -- -- -- -- --    #Criando a lista de setups para o fenômeno    Setups = [('Data', type(datetime.today())), ('Responsavel', str), ('Código', int), ('Identificador', int)]    #Lista de fenômenos inicia vazia    PhenomenonList = []    #Cria um novo fenômeno com os setups    newPhenomenon = Phenomenon(Setups)    #Adiciona os dados presentes na planilha. O algoritmo vai automaticamente separar o as tags,    #instâncias e dados    newPhenomenon.from_xls_data('Datas/example.xlsx')    #adiciona o fenômeno na lista de fenômenos    PhenomenonList.append(newPhenomenon)    # -- -- -- -- -- -- -- -- E-T -- -- -- -- -- -- -- -- -- -- -- -- --    #Criando a lista de regras    #R = []    R = [Rule(0, fixStrInt), Rule(0, FixFloatInt), Rule(0, FixFloatDate), Rule(0, FixStrDate)]    #Ordenando a lista por prioridade    R = sorted(R, key=Rule.getPriority)    #deepcopy para preservar a lista original    PhenomenonTransformed = deepcopy(PhenomenonList)    # Executa cada regra que tem toda a lista de fenômenos como entrada    for r_i in R:        PhenomenonTransformed = Psi(PhenomenonTransformed, r_i)    # -- -- -- -- -- -- -- -- E-L -- -- -- -- -- -- -- -- -- -- -- -- --    #Função auxiliar    def saveDatas(data_list, tag_list):        final_list = []        for internal_list in data_list:            parcial = deepcopy(tag_list)            parcial.extend(internal_list)            final_list.append(parcial)        return final_list    #Para cada fenômeno da lista:    for i, Phenom in enumerate(PhenomenonTransformed):        database = []        #Executa o Algoritmo 1        for Instance in Phenom.dataInstanceList:            tags = []            for Tag in Instance.listTag:                tags.append(Tag.TagValue)            database.extend(saveDatas(Instance.datas, tags))        csvSave(str(i), database)